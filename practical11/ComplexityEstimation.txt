explaination about the recursive time
the code checks whether we can use all input numbers (n) to get 24, and then n-1 numbers and then n-2 and so on. 
for example, 2,12,1,1,1,1,1 recursive time is very big. Although it looks easy (2*12=24), but the code first check whether we can use all the numbers to get 24. 

Complexity estimation:
The first loop (for i in range(N,1,-1)) is to code check whether we can use all input numbers (n) to get 24, and then n-1 numbers and then n-2 and so on. 
O(N-1) (N is the number of cards)
The second loop (for i in range(0, len(all_sequence)) is to merge every possible sequences. 
if we use all numbers, the number of the possible sequences are N!
if we use N-1 numbers, the number of the possible sequences are still N!
if we use N-2 numbers, the number of the possible sequences are (CN2)(N-2)!
In conclusion, if we use n numbers, the number of the possible sequences are (CNn)(N-n)!
And then all possible sequences need to undergo merge process. All these terms need to be multipied by n-1. 
So we get (n-1)(CNn)((N-n)!). Keep the dominant terms, we get N!/n!
To sum up, the complexity is N!+N!/2!+'''+N!/(N-1)!+1. 